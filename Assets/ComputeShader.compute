#pragma kernel CSMain 

RWStructuredBuffer<double> _CBUnrolled, _CBNotUnrolled;

// Dummy function for Newtons method
double fDummy(double k, double fnh, double h, double theta)
{
    return fnh * fnh * k * h * cos((float) theta) * cos((float) theta) - (double) tanh((float) (k * h));
}
 
// Derivative of Dummy function above using a central finite difference scheme.
double dfDummy(double k, double fnh, double h, double theta)
{
    return (fDummy(k + (double) 1e-3, fnh, h, theta) - fDummy(k - (double) 1e-3, fnh, h, theta)) / (double) 2e-3;
}
 
// Function to solve.
double f(double fnh, double h, double theta)
{
    // Solved using Newton's method.
    int max_iter = 50;
    double epsilon = 1e-8;
    double fxn, dfxn;
 
    // Define initial guess for k, herby denoted as x.
    double xn = 10.0;
 
    for (int n = 0; n < max_iter; n++)
    {
        fxn = fDummy(xn, fnh, h, theta);
       
        if (abs(fxn) < epsilon)     // A solution is found.
            return xn;
       
        dfxn = dfDummy(xn, fnh, h, theta);
 
        if (dfxn == 0.0)    // No solution found.
            return xn;
 
        xn = xn - fxn / dfxn;
    }
 
    // No solution found.
    return xn;
}

[numthreads(64, 1, 1)]
void CSMain(uint3 threadID : SV_DispatchThreadID)
{
    if ((int) threadID.x != 1)
        return;

    int N = 4;
    
    // ---------------
    double fnh = 0.9, h = 4.53052, theta = -0.161, dtheta = 0.01, k = 1.0; // Example values.

    for (int i = 0; i < N; i++)             // Not unrolled loop (regular loop).    
    {
        if (i < 2)
        {
            _CBNotUnrolled[i] = ((k + (double) 1e-3) * theta - (k - (double) 1e-3) * theta) / (double) 2e-3;
        }
        else
        {
            _CBNotUnrolled[i] = f(fnh, h, theta);
        }
        theta += dtheta;
    }
    
    [unroll(N)] for (int j = 0; j < N; j++) // Unrolled loop.
    {
        if (i < 2)
        {
            _CBUnrolled[j] = ((k + (double) 1e-3) * theta - (k - (double) 1e-3) * theta) / (double) 2e-3;
        }
        else
        {
            _CBUnrolled[j] = f(fnh, h, theta);
        }
        theta += dtheta;
    }

}
